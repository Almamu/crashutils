GOOL SUBSYSTEM (JUMPTABLE CASE/OPCODE TYPE 142/0x8E):

GOOL OPCODE TYPE :

________ ___DDDCC CBBBAAAA AAAAAAAA 


procVector = process[0x80 + (bbits * 12)];

sub_8001CF4C(process, abits, 0);  //translate the address, popping stack for addresses that want the stack
                                  //however we dont return the translated address

if (dbits < 7)
  jump case dbits...
else
  jump case default;
  
case 0:

var_118 = process[0x80];
var_114 = process[0x84];
var_110 = process[0x88];

var_128 = processVector[0];
var_124 = processVector[4];
var_120 = processVector[8];

val = ((process[0x18] >> 31) + process[0x18]) >> 2; //modifying y coordinate
var_114 += val; 
  
process[0xF4] = sub_800277EC(&var_118, &var_128);

if (abits != 0xBE0)   //if untranslated addr for destination != null
{ 
  if (abits & 0xE00 != 0xE00) //destination = various
  { 
    dest = sub_8001FB34(process, abits);
  }
  if (abits == 0xE1F)         //destination = process stack
  {                         
    dest = process.push();  //get stack ready for data write (push but dont write data yet)
  }
  else                        //destination = process data
  {  
    dataIndex = abits & 0x1FF;
    dest = process[0x60 + (dataIndex*4)];  
  }  

  dest[0] = var_128;
  dest[4] = var_124;
  dest[8] = var_120;
}

destProcvector = (cbits * 12);
destProcvector[0] = var_118;
destProcvector[4] = var_114;
destProcvector[8] = var_110;
----------

case 1:

var_108 = process[0x80];
var_104 = process[0x84];
var_100 = process[0x88];
var_F0  = process[0x80];
var_EC  = process[0x84];
var_E8  = process[0x88];

if (process == gp[0x2B8] || process[0x64] == gp[0x2B8])  //if we're handling the crash process or a child of the crash process
{
  sub_800289B4(process);
}
  
process[0xF4] = sub_80028644(process, &var_F0);

if (abits != 0xBE0)   //if untranslated addr for destination != null
{ 
  if (abits & 0xE00 != 0xE00) //destination = various
  { 
    dest = sub_8001FB34(process, abits);
  }
  if (abits == 0xE1F)         //destination = process stack
  {                         
    dest = process.push();  //get stack ready for data write (push but dont write data yet)
  }
  else                        //destination = process data
  {  
    dataIndex = abits & 0x1FF;
    dest = process[0x60 + (dataIndex*4)];  
  }  

  dest[0] = var_D0;
  dest[4] = var_CC;
  dest[8] = var_C8;
}

destProcvector = (cbits * 12);
destProcvector[0] = var_F0;
destProcvector[4] = var_EC;
destProcvector[8] = var_E8;
--------------------------
  
case 2-5:

if (case 4 or 5) { flagA = 1; }  //flagA = a3
if (case 3 or 5) { flagB = 1; }  //flagB = t0

var_D0 = process[0x80];
var_CC = process[0x84];
var_C8 = process[0x88];

if (process[0x28]) { zone = process[0x28]; }
else               { zone =    *(0x57914); }

//a1 = &var_d0
zoneHeader = zone[0x10];

if (zoneHeader[0x2FC] & 1 == 0) 
{
  if (flagB) { arg2 = 5; }
  else       { arg2 = 1; }
}
else
{
  if (flagB) { arg2 = 6; }
  else       { arg2 = 2; }
}

sub_80028E3C(process, &var_D0, arg2, !flagA); 

if (abits != 0xBE0)   //if untranslated addr for destination != null
{ 
  if (abits & 0xE00 != 0xE00) //destination = various
  { 
    dest = sub_8001FB34(process, abits);
  }
  if (abits == 0xE1F)         //destination = process stack
  {                         
    dest = process.push();  //get stack ready for data write (push but dont write data yet)
  }
  else                        //destination = process data
  {  
    dataIndex = abits & 0x1FF;
    dest = process[0x60 + (dataIndex*4)];  
  }  

  dest[0] = var_C0;
  dest[4] = var_BC;
  dest[8] = var_B8;
}

destProcvector = (cbits * 12);
destProcvector[0] = var_D0;
destProcvector[4] = var_CC;
destProcvector[8] = var_C8;
--------------------------------

case 6:

sub_8002940C(process);

--------------------------


---alternative translation subroutine (with flag for push/pop stack for addresses that require stack data)---
sub_8001CF4C(process, gaddress, flag)
{
  if (gaddress & 0x800 == 0) 
  {
    //0EAA AAAAAAAA = grab from  E=1: instantiating code process
	                             E=0: code containing code process
					  EID list item eid number 'abits'
	if (ebit)
	  codeEntry = process[0x20];
	else
	  codeEntry = process[0x24];
	  
	return codeEntry[0x18][abits*4];
  }
  if (gaddress & 0x400 == 0) 
  { 

    //000V VVVVVVVV = store vbits*256 in double buffer
	if (gaddress & 0x200 == 0) 
	{
	  if      (gp[0x90] == 0)  //gp[0x90] = flip-flop
	  {
	    buf = gp[0x8C] + 4;    //gp[0x8C] = pts to the 2 buffers
	    gp[0x90] = 1;
	  }
	  else if (gp[0x90] == 1)
	  {
	    buf = gp[0x8C];
		gp[0x90] = 0;
	  }
	  
	  *(buf) = vbits*256;
	  
	  return buf;  //return a pointer to the active buffer
	}

	//0000 VVVVVVVV = store vbits*16 in double buffer
	if (gaddress & 0x100 == 0) 
	{ 
	  if      (gp[0x90] == 0)  //gp[0x90] = flip-flop
	  {
	    buf = gp[0x8C] + 4;    //gp[0x8C] = pts to the 2 buffers
	    gp[0x90] = 1;
	  }
	  else if (gp[0x90] == 1)
	  {
	    buf = gp[0x8C];
	    gp[0x90] = 0;
	  }
	  
	  *(buf) = vbits*16;
	  
	  return buf;  //return a pointer to the active buffer
	}
	
	//1000 0AAAAAAA
	if (gaddress & 0x80  == 0) 
	{ 
      return process[0xE4]+(abits*4);
	}
	
	//1011 11100000
	if      (gaddress == 0xBE0) { return 0; }
	//1011 11110000
	else if (gaddress == 0xBF0) { return 1; }
	
	//1011 1111????   ???? != 0
	else { return 0xBF0; }
	
  }
  if (gaddress & 0x200 == 0) 
  {
    //110B BBAAAAAA
	link = process[0x60 + bbits*4];
	
	if (link)
	{
	  return &link[0x60 + abits*4];
	}
	else
	{
	  return 0;
	}
  }
  address = gaddress & 0x1FF;
  if (address != 0x1F) { return &process[0x60 + address]; }
  
  if (flag)
  {
    return process[0xDC]++; //forward a word
  }
  else
  {
    return process[0xDC]--; //back a word 
  } 
}