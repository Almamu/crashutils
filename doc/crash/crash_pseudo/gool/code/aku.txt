sub_0x0()
{
PSHA     false, process[0x188]
CEQ      0x100, 0xc($fp)
CEQ      0x200, 0xc($fp)
ORL      pop(), pop()
BEQZ    0x4c($pc), -0x0
PSHA     process[0xb4], process[0xb0]
PSHA     false, process[0xb8]
MOVE     link6[0x80], process[0xbc]
MOVE     link6[0x84], process[0xc0]
MOVE     link6[0x88], process[0xc4]
MOVE     0, process[0xb0]
ADD      process[0x194], link6[0xb4]
MOVE     pop(), process[0xb4]
MOVE     0, process[0xb8]
ABS      process[0x18c], pop()
0x1D     0x7800, pop()
ADD      pop(), static[0x28]
PSHA     pop(), process[0x198]
VECT    0, 5, 5, 5, 0
MOVE     0x18($fp), process[0xb8]
MOVE     0x14($fp), process[0xb4]
MOVE     0x10($fp), process[0xb0]
J       0x0($pc), -0x3, process[0xf4]
J       0xc($pc), -0x0, process[0xf4]
CEQ      0x300, 0xc($fp)
BEQZ    0x4($pc), -0x0
VECT    0, 6, 5, 5, 6
J       0x0($pc), -0x1, process[0xf4]
RTE      (process[0xf4])
}

sub_0x74_0()
{
MOVE     process[0x74], process[0x78]
MOVE     process[0x60], link6[0x70]
0x20     process[0x60], 0x1000
MOVE     static[0x38], process[0x138]
MOVE     static[0xc], process[0xb0]
MOVE     static[0xc], process[0xb4]
MOVE     static[0xc], process[0xb8]
MOVE     0, process[0x18c]
MOVE     static[0x10], process[0xb0]
MOVE     0, process[0x190]
MOVE     0x1000, process[0x19c]
MOVE     process[0xfc], process[0x1a0]
MOVE     static[0x14], process[0x198]
0x1F     false, 0
CEQ      0x2800, pop()
0x1F     false, 0
CEQ      0x2a00, pop()
ORL      pop(), pop()
BEQZ    0x8($pc), -0x0
MOVE     0, process[0x1a4]
0x20     0, 0x3600
PSHA     false, -0x4($fp)
CEQ      0x100, 0xc($fp)
BEQZ    0x24($pc), -0x0
MOVE     0x100, process[0x188]
MSC     process[0x188], 5, 0x6, 12
MOVE     static[0x18], process[0xcc]
MOVE     link5[0x80], process[0x80]
ADD      static[0x1c], link5[0x84]
MOVE     pop(), process[0x84]
MOVE     link5[0x88], process[0x88]
JALR    subID(1), process[0xf4]
J       0x48($pc), -0x0, process[0xf4]
CEQ      0x200, 0xc($fp)
CEQ      0x300, 0xc($fp)
ORL      pop(), pop()
BEQZ    0x34($pc), -0x0
MOVE     0x200, process[0x188]
MSC     process[0x188], 5, 0x6, 12
MOVE     static[0x18], process[0xcc]
MOVE     static[0x20], process[0x19c]
0x1F     false, 0x2500
MOVE     pop(), process[0x80]
0x1F     false, 0x2600
MOVE     pop(), process[0x84]
0x1F     false, 0x2700
SUB      static[0x24], pop()
MOVE     pop(), process[0x88]
JALR    subID(1), process[0xf4]
J       0x4($pc), -0x0, process[0xf4]
JALR    subID(4), process[0xf4]
J       0x0($pc), -0x1, process[0xf4]
RTE      (process[0xf4])
}

sub_0x148_1()
{
CEQ      0x100, process[0x188]
BEQZ    0x8($pc), -0x0
ANIS    0, 0, 1, 3
J       0x4($pc), -0x0, process[0xf4]
ANIS    0, 2, 1, 3
J       0xfe8($pc), -0x0, process[0xf4]
RTE      (process[0xf4])
}

//event service routine for state 1 and 2
sub_0x164(tag, arg)
{
CEQ      0x600, -0x8($fp)
BEQZ    0xb8($pc), -0x0
SGE      0x300, process[0x188]
RNNT    subID(0), pop()
0x1F     false, 0
CEQ      0x2800, pop()
0x1F     false, 0
CEQ      0x2a00, pop()
ORL      pop(), pop()
BEQZ    0x10($pc), -0x0
SNDB    0x400, 0, 0, 0, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x4]
RNRF    subID(0), process[0xf4]
CEQ      static[0x30], link7[0xd4]
NOTL     pop(), pop()
BEQZ    0x10($pc), -0x0
MSC     -0x4($fp), 5, 0x0, 0
PSHA     false, pop()
0x87    0x2800, 0, 1, 6
RNZT    subID(0), process[0xf4]
ADD      0x100, process[0x188]
MOVE     pop(), process[0x188]
MSC     process[0x188], 5, 0x6, 12
0x1F     false, 0
CEQ      0xa00, pop()
0x1F     false, 0
CEQ      0x1b00, pop()
ORL      pop(), pop()
NOTL     pop(), pop()
BEQZ    0xc($pc), -0x0
SNDB    0x400, 0, 0, 0, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x4]
CHLD    10, 5, 5, 0
SGE      0x300, process[0x188]
BEQZ    0x18($pc), -0x0
MSC     -0x4($fp), 5, 0x0, 0
PSHA     false, pop()
0x87    0x600, 0, 1, 6
MOVE     static[0x34], self[0x128]
MOVE     process[0xfc], self[0x12c]
J       0x10($pc), -0x0, process[0xf4]
MOVE     static[0x20], process[0x19c]
MOVE     0x2000, process[0x98]
MOVE     0x2000, process[0x9c]
MOVE     0x2000, process[0xa0]
RNRF    subID(0), process[0xf4]
CEQ      0x300, -0x8($fp)
BEQZ    0xa4($pc), -0x0
MOVE     link6[0x7c], process[0x70]
PSHA     false, 0
0x87    0xa00, 0, 1, 4
MOVE     link6[0x78], process[0x70]
PSHA     false, 0
0x8F    0x2b00, 0, 1, 0
SGE      0x300, process[0x188]
BEQZ    0x4($pc), -0x0
RNRF    subID(0), process[0xf4]
CEQ      0x200, process[0x188]
BEQZ    0x74($pc), -0x0
SNDB    0x400, 0, 0, 0, 0
SNDB    static[0x34], 0, 0, 1, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x8]
PSHA     static[0x3c], 0
PSHA     false, static[0x40]
CHLD    1, 2, 5, 3
PSHA     static[0x44], static[0x40]
PSHA     false, 0
CHLD    1, 2, 5, 3
PSHA     static[0x48], static[0x40]
PSHA     false, 0
CHLD    1, 2, 5, 3
PSHA     0, static[0x4c]
PSHA     false, static[0x50]
CHLD    1, 2, 5, 3
PSHA     static[0x54], 0
PSHA     false, 0
CHLD    1, 2, 5, 3
MOVE     static[0x58], self[0x128]
MOVE     process[0xfc], self[0x12c]
MOVE     0x1000, process[0x19c]
MOVE     0x1800, process[0x98]
MOVE     0x1800, process[0x9c]
MOVE     0x1800, process[0xa0]
SUB      0x100, process[0x188]
MOVE     pop(), process[0x188]
MSC     process[0x188], 5, 0x6, 12
RNRF    subID(0), process[0xf4]
RSRF    subID(3), process[0xf4]
RTE      (process[0xf4])
}

//per-frame routine state 1
sub_0x2d4() 
{
0x1F     false, 0
CEQ      0x2800, pop()
0x1F     false, 0
CEQ      0x2a00, pop()
ORL      pop(), pop()
BEQZ    0x7c($pc), -0x0
MOVE     process[0x1a4], push()
BEQZ    0x40($pc), -0x0
WLCV    0x200, process[0x60], 21
WLCV    0x200, process[0x60], 22
WLCV    0x200, process[0x60], 23
WLCV    0x200, process[0x60], 12
WLCV    0x200, process[0x60], 13
WLCV    0x200, process[0x60], 14
WLCV    0x200, process[0x60], 15
WLCV    0x200, process[0x60], 16
WLCV    0x200, process[0x60], 17
WLCV    0x200, process[0x60], 18
WLCV    0x200, process[0x60], 19
WLCV    0x200, process[0x60], 20
SUB      static[0x5c], process[0x1a4]
MOVE     pop(), process[0x1a4]
0x20     process[0x60], 0x3600
J       0x34($pc), -0x0, process[0xf4]
WLCV    0x100, process[0x60], 21
WLCV    0x100, process[0x60], 22
WLCV    0x100, process[0x60], 23
WLCV    0x100, process[0x60], 12
WLCV    0x100, process[0x60], 13
WLCV    0x100, process[0x60], 14
WLCV    0x100, process[0x60], 15
WLCV    0x100, process[0x60], 16
WLCV    0x100, process[0x60], 17
WLCV    0x100, process[0x60], 18
WLCV    0x100, process[0x60], 19
WLCV    0x100, process[0x60], 20
0x20     0, 0x3600
PSHA     false, process[0x188]
CEQ      0x200, 0xc($fp)
BEQZ    0x40($pc), -0x0
0x1F     false, 0x2b00
SLT      static[0x60], pop()
BEQZ    0x1c($pc), -0x0
0x1E     0, static[0x58]
NOTL     pop(), pop()
BEQZ    0xc($pc), -0x0
PSHA     process[0x60], 0x2200
PSHA     false, static[0x64]
CHLD    1, 3, 5, 3
J       0x18($pc), -0x0, process[0xf4]
0x1E     0, 0x10
NOTL     pop(), pop()
BEQZ    0xc($pc), -0x0
PSHA     process[0x60], 0x2200
PSHA     false, static[0x64]
CHLD    1, 3, 5, 3
J       0x0($pc), -0x1, process[0xf4]
ADD      static[0x68], link6[0x90]
0x1F     false, 0xf00
0x21     pop(), pop()
ABS      pop(), pop()
SLT      static[0x6c], pop()
BEQZ    0x18($pc), -0x0
MOVE     process[0x190], push()
BEQZ    0x8($pc), -0x0
MOVE     static[0x10], process[0x194]
J       0x4($pc), -0x0, process[0xf4]
MOVE     static[0x70], process[0x194]
J       0x14($pc), -0x0, process[0xf4]
MOVE     process[0x190], push()
BEQZ    0x8($pc), -0x0
MOVE     static[0x74], process[0x194]
J       0x4($pc), -0x0, process[0xf4]
MOVE     static[0x78], process[0x194]
NOTL     process[0x190], pop()
SUB      process[0x1a0], process[0xfc]
SGE      static[0x60], pop()
SUB      process[0x1a0], process[0xfc]
SGE      static[0x4c], pop()
NOTL     pop(), pop()
ANDL     pop(), pop()
ANDL     pop(), pop()
BEQZ    0x10($pc), -0x0
MOVE     static[0x7c], process[0xb0]
0x1F     false, 0xf00
MOVE     pop(), process[0xb4]
J       0x24($pc), -0x0, process[0xf4]
MOVE     static[0x10], process[0xb0]
SHA      static[0x80], process[0x18c]
ABS      pop(), pop()
SHA      static[0x84], process[0x18c]
ABS      pop(), pop()
SUB      pop(), 0
ADD      pop(), pop()
ADD      pop(), link6[0x90]
MOVE     pop(), process[0xb4]
PSHA     0x200, 0x7800
0x13     true, process[0x18c]
MOVE     process[0x90], process[0x94]
SHA      static[0x84], process[0x18c]
ABS      pop(), pop()
MOVE     pop(), process[0x8c]
CEQ      process[0x19c], process[0x98]
NOTL     pop(), pop()
BEQZ    0x24($pc), -0x0
PSHA     static[0x88], process[0x19c]
0x22     true, process[0x98]
MOVE     pop(), process[0x98]
PSHA     static[0x88], process[0x19c]
0x22     true, process[0x9c]
MOVE     pop(), process[0x9c]
PSHA     static[0x88], process[0x19c]
0x22     true, process[0xa0]
MOVE     pop(), process[0xa0]
SUB      static[0x64], link5[0x138]
MOVE     pop(), process[0x138]
 JAL    0x0000, 0
MSC     process[0xbc], 0, 0x0, 6
MOVE     pop(), process[0xf8]
CEQ      0x300, process[0x188]
BEQZ    0x4c($pc), -0x0
0x1B     static[0x8c], 0
PSHA     pop(), process[0xbc]
0x22     true, process[0x80]
MOVE     pop(), process[0x80]
0x1B     static[0x8c], 0
PSHA     pop(), process[0xc0]
0x22     true, process[0x84]
MOVE     pop(), process[0x84]
0x1B     static[0x8c], 0
PSHA     pop(), process[0xc4]
0x22     true, process[0x88]
MOVE     pop(), process[0x88]
CEQ      process[0xbc], process[0x80]
CEQ      process[0xc0], process[0x84]
CEQ      process[0xc4], process[0x88]
ANDL     pop(), pop()
ANDL     pop(), pop()
BNEZAL  subID(2)
J       0xf4($pc), -0x0, process[0xf4]
ABS      process[0xf8], pop()
SGT      static[0x90], pop()
BEQZ    0x28($pc), -0x0
ADD      process[0xbc], process[0x80]
SHA      static[0x94], pop()
MOVE     pop(), process[0x80]
ADD      process[0xc0], process[0x84]
SHA      static[0x94], pop()
MOVE     pop(), process[0x84]
ADD      process[0xc4], process[0x88]
SHA      static[0x94], pop()
MOVE     pop(), process[0x88]
J       0xc0($pc), -0x0, process[0xf4]
MOVE     process[0x190], push()
BEQZ    0x58($pc), -0x0
ABS      process[0xf8], pop()
SHA      0, pop()
ADD      static[0x98], pop()
MOVE     pop(), process[0xb8]
SUB      process[0x80], process[0xbc]
SHA      static[0x34], pop()
0x1B     pop(), process[0xa4]
MOVE     pop(), process[0xa4]
SUB      process[0x84], process[0xc0]
SHA      static[0x34], pop()
0x1B     pop(), process[0xa8]
MOVE     pop(), process[0xa8]
SUB      process[0x88], process[0xc4]
SHA      static[0x34], pop()
0x1B     pop(), process[0xac]
MOVE     pop(), process[0xac]
MOVE     static[0x14], process[0x198]
SLT      static[0x9c], process[0xf8]
BEQZ    0x8($pc), -0x0
MOVE     process[0xfc], process[0x1a0]
MOVE     0, process[0x190]
J       0x60($pc), -0x0, process[0xf4]
ABS      process[0xf8], pop()
SHA      static[0xa0], pop()
ADD      0x5000, pop()
MOVE     pop(), process[0xb8]
SUB      process[0x80], process[0xbc]
SHA      static[0xa4], pop()
0x1B     pop(), process[0xa4]
MOVE     pop(), process[0xa4]
SUB      process[0x84], process[0xc0]
SHA      static[0xa8], pop()
0x1B     pop(), process[0xa8]
MOVE     pop(), process[0xa8]
SUB      process[0x88], process[0xc4]
SHA      static[0xa4], pop()
0x1B     pop(), process[0xac]
MOVE     pop(), process[0xac]
SGT      static[0x98], process[0xf8]
BEQZ    0x4($pc), -0x0
MOVE     0x100, process[0x190]
MOVE     static[0x98], process[0x198]
SUB      static[0xac], process[0xfc]
SGE      process[0x1a0], pop()
BEQZ    0x4($pc), -0x0
MOVE     process[0xfc], process[0x1a0]
SGT      static[0xb0], process[0xb8]
BEQZ    0x4($pc), -0x0
MOVE     static[0xb0], process[0xb8]
RTE      (process[0xf4])

//state 2
sub_0x608_2()
{
ANDB     static[0xb4], process[0xcc]
MOVE     pop(), process[0xcc]
MOVE     0x1800, process[0x19c]
J       0x4($pc), -0x0, process[0xf4]
ANIS    0, 2, 1, 3
MOVE     link6[0x128], push()
BNEZ    0xff4($pc), -0x0
SNDB    0x400, 0, 0, 0, 0
SNDB    static[0x34], 0, 0, 1, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x8]
SUB      0x100, process[0x188]
MOVE     pop(), process[0x188]
MSC     process[0x188], 5, 0x6, 12
MOVE     0x1000, process[0x19c]
ORB      static[0x5c], process[0xcc]
MOVE     pop(), process[0xcc]
JALR    subID(1), process[0xf4]
RTE      (process[0xf4])
}

//per-frame routine for state 2
sub_0x654()
{
0x1E     0, static[0x34]
NOTL     pop(), pop()
BEQZ    0xc($pc), -0x0
PSHA     process[0x60], 0x2200
PSHA     false, static[0x64]
CHLD    1, 3, 5, 3
ADD      static[0x5c], link5[0x138]
MOVE     pop(), process[0x138]
MOVE     link6[0x90], process[0x90]
MOVE     process[0x90], process[0x94]
VECT    0, 6, 0, 5, 6
SHA      static[0xb8], link6[0x150]
MOVE     pop(), process[0x8c]
MOVE     link6[0x78], process[0x70]
PSHA     false, 0
0x87    0xa00, 0, 1, 4
BEQZ    0x4($pc), -0x0, process[0xf4]
CHLD    10, 4, 5, 0
MOVE     static[0x98], process[0xb0]
MOVE     static[0x1c], process[0xb4]
MOVE     static[0x98], process[0xb8]
PSHA     false, 0
0x8F    0xa00, 0, 1, 5
BEQZ    0x4($pc), -0x0, process[0xf4]
CHLD    10, 4, 5, 0
CEQ      process[0x19c], process[0x98]
NOTL     pop(), pop()
BEQZ    0x24($pc), -0x0
PSHA     static[0x88], process[0x19c]
0x22     true, process[0x98]
MOVE     pop(), process[0x98]
PSHA     static[0x88], process[0x19c]
0x22     true, process[0x9c]
MOVE     pop(), process[0x9c]
PSHA     static[0x88], process[0x19c]
0x22     true, process[0xa0]
MOVE     pop(), process[0xa0]
RTE      (process[0xf4])
}

//state 3
sub_0x6EC_3()
{
ANDB     static[0xbc], process[0xcc]
MOVE     pop(), process[0xcc]
SNDB    0x400, 0, 0, 0, 0
SNDB    static[0x34], 0, 0, 1, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x8]
PSHA     static[0x3c], 0
PSHA     false, static[0x40]
CHLD    1, 2, 5, 3
PSHA     static[0x44], static[0x40]
PSHA     false, 0
CHLD    1, 2, 5, 3
PSHA     static[0x48], static[0x40]
PSHA     false, 0
CHLD    1, 2, 5, 3
PSHA     0, static[0x4c]
PSHA     false, static[0x50]
CHLD    1, 2, 5, 3
PSHA     static[0x54], 0
PSHA     false, 0
CHLD    1, 2, 5, 3
J       0x4($pc), -0x0, process[0xf4]
ANIS    0, 0, 1, 3
SGT      static[0xc0], process[0x98]
BNEZ    0xff4($pc), -0x0
JALR    subID(4), process[0xf4]
RTE      (process[0xf4])
}

//per-frame routine for state 3
sub_0x758()
{
MOVE     0, process[0x188]
MSC     process[0x188], 5, 0x6, 12
MOVE     0x1000, process[0xf8]
MOVE     process[0xe0], process[0xe8]
PSHA     static[0xc8], static[0xc4]
0x13     true, process[0xf8]
MOVE     pop(), process[0x98]
MOVE     process[0x98], process[0x9c]
MOVE     process[0x98], process[0xa0]
RTE      (process[0xf4])
}

//state 4
sub_0x780_4()
{
MOVE     0x100, process[0xcc]
MOVE     0, process[0x188]
MSC     process[0x188], 5, 0x6, 12
0x1F     false, 0
CEQ      0x2800, pop()
0x1F     false, 0
CEQ      0x2a00, pop()
ORL      pop(), pop()
BEQZ    0x1c($pc), -0x0
0x20     0, 0x3600
MOVE     link5[0x80], process[0x80]
MOVE     link5[0x84], process[0x84]
MOVE     link5[0x88], process[0x88]
MOVE     0, process[0x108]
ANIF    0, 1, 3
J       0xfe8($pc), -0x0, process[0xf4]
ANIS    0, 6, 63, 3
J       0xff8($pc), -0x0, process[0xf4]
RTE      (process[0xf4])
}

//event service routine for state 3 & 4
sub_0x7CC()
{
CEQ      0x600, -0x8($fp)
BEQZ    0xac($pc), -0x0
CEQ      static[0x30], link7[0xd4]
NOTL     pop(), pop()
BEQZ    0x18($pc), -0x0
MSC     -0x4($fp), 5, 0x0, 0
PSHA     false, pop()
0x87    0x2800, 0, 1, 6
NOTL     process[0xf4], pop()
BEQZ    0x4($pc), -0x0
RNRT    subID(0), process[0xf4]
MOVE     0x100, process[0x188]
MSC     process[0x188], 5, 0x6, 12
MSC     -0x4($fp), 5, 0x0, 0
MOVE     pop(), process[0x70]
MOVE     link4[0x80], process[0x80]
MOVE     0, process[0xa4]
MOVE     0, process[0x8c]
MOVE     link4[0x84], process[0x84]
MOVE     0, process[0xa8]
MOVE     0, process[0x90]
MOVE     link4[0x88], process[0x88]
MOVE     0, process[0xac]
MOVE     0, process[0x94]
MOVE     0, process[0x18c]
MOVE     static[0x10], process[0xb0]
MOVE     0, process[0x190]
MOVE     static[0x14], process[0x198]
0x1F     false, 0
CEQ      0xa00, pop()
0x1F     false, 0
CEQ      0x1b00, pop()
ORL      pop(), pop()
NOTL     pop(), pop()
BEQZ    0xc($pc), -0x0
SNDB    0x400, 0, 0, 0, 0
SNDB    0xf0, 0, 0, 1, 1
SNDA     static[0x2c], static[0x4]
CHLD    10, 5, 5, 0
MOVE     0x1000, process[0x98]
MOVE     0x1000, process[0x9c]
MOVE     0x1000, process[0xa0]
MOVE     0x1000, process[0x19c]
MOVE     static[0x18], process[0xcc]
RSRF    subID(1), process[0xf4]
RTE      (process[0xf4])
}

//state 5
sub_0x884_5()
{
MOVE     static[0xcc], process[0xcc]
MOVE     -0x4($fp), process[0xf8]
MOVE     0x800, process[0x98]
MOVE     0x800, process[0x9c]
MOVE     0x800, process[0xa0]
ANIS    1, 6, 63, 3
J       0xff8($pc), -0x0, process[0xf4]
RTE      (process[0xf4])
}

//per-frame routine for state 5
sub_0x8a4()
{
VECT    process[0xf8], 6, 0, 5, 1
RTE      (process[0xf4])
}

//state 6
sub_0x8ac()
{
MOVE     -0x8($fp), process[0x74]
MOVE     static[0xd0], process[0x138]
MOVE     0, process[0x8c]
MOVE     0, process[0x90]
MOVE     0, process[0x94]
MOVE     0, process[0x98]
MOVE     0, process[0x9c]
MOVE     0, process[0xa0]
SUB      static[0xa8], -0x4($fp)
MOVE     pop(), process[0x154]
RND      -0xc($fp), 0
VECT    pop(), 6, 0, 5, 5
MOVE     process[0xfc], push()
ANIS    0, 30, 1, 3
SUB      0xc($fp), process[0xfc]
SLT      -0x4($fp), pop()
BNEZ    0xff0($pc), -0x0
MOVE     pop(), false
RTE      (process[0xf4])
}

//state 6 per-frame routine
sub_0x8f8()
{
MOVE     static[0xd4], process[0xf8]
MOVE     process[0xe0], process[0xe8]
TST      0x20, process[0xc8]
NOTL     pop(), pop()
BEQZ    0x34($pc), -0x0
PSHA     static[0xd8], process[0xf8]
0x22     true, process[0x98]
MOVE     pop(), process[0x98]
PSHA     static[0xd8], process[0xf8]
0x22     true, process[0x9c]
MOVE     pop(), process[0x9c]
PSHA     static[0xd8], process[0xf8]
0x22     true, process[0xa0]
MOVE     pop(), process[0xa0]
SUB      process[0x100], process[0xfc]
SGE      process[0x154], pop()
BEQZ    0x4($pc), -0x0
MOVE     0, process[0xf8]
RTE      (process[0xf4])
}

sub_0x944()
{
ANIS    4, 30, 1, 3
ANIF    0x300, 1, 3
ANIF    0x400, 1, 3
ANIF    0x200, 1, 3
ANIF    0x100, 1, 3
ANIF    0, 3, 3
PSHA     false, process[0x108]
ANIS    0, 78, 1, 3
MOVE     0xc($fp), process[0x108]
J       0x0($pc), -0x1, process[0xf4]
ANIF    0, 1, 3
ANIF    0x100, 2, 3
ANIF    0x200, 2, 3
PSHA     false, process[0x108]
ANIS    0, 78, 1, 3
MOVE     0xc($fp), process[0x108]
J       0x0($pc), -0x1, process[0xf4]
ANIF    0x300, 2, 3
ANIF    0x400, 2, 3
RTE      (process[0xf4])
}

//state 7 (unused?)
sub_0x994()
{
RTE      (process[0xf4])
}

//state 8
sub_0x998()
{
MOVE     0x1800, process[0x98]
MOVE     0x1800, process[0x9c]
MOVE     0x1800, process[0xa0]
MOVE     process[0x84], process[0x18c]
RND      0, 0
ADD      pop(), static[0xdc]
SUB      pop(), 0
MOVE     pop(), process[0xf8]
SHA      static[0x5c], -0xc($fp)
WLCV    pop(), process[0x60], 21
SHA      static[0x5c], -0x8($fp)
WLCV    pop(), process[0x60], 22
SHA      static[0x5c], -0x4($fp)
WLCV    pop(), process[0x60], 23
SHA      static[0x5c], -0xc($fp)
WLCV    pop(), process[0x60], 12
SHA      static[0x5c], -0x8($fp)
WLCV    pop(), process[0x60], 13
SHA      static[0x5c], -0x4($fp)
WLCV    pop(), process[0x60], 14
SHA      static[0x5c], -0xc($fp)
WLCV    pop(), process[0x60], 15
SHA      static[0x5c], -0x8($fp)
WLCV    pop(), process[0x60], 16
SHA      static[0x5c], -0x4($fp)
WLCV    pop(), process[0x60], 17
SHA      static[0x5c], -0xc($fp)
WLCV    pop(), process[0x60], 18
SHA      static[0x5c], -0x8($fp)
WLCV    pop(), process[0x60], 19
SHA      static[0x5c], -0x4($fp)
WLCV    pop(), process[0x60], 20
RND      static[0xe0], -0x5000
ADD      pop(), process[0x80]
MOVE     pop(), process[0x80]
RND      static[0xe0], -0x5000
ADD      pop(), process[0x88]
MOVE     pop(), process[0x88]
ADD      0x5000, process[0x84]
MOVE     pop(), process[0x84]
MOVE     static[0xe4], process[0x138]
MOVE     0, process[0x8c]
RND      0x1000, 0
MOVE     pop(), process[0x90]
MOVE     0, process[0x94]
RND      static[0xa4], 0
NOTL     pop(), pop()
BEQZ    0x10($pc), -0x0
RND      static[0x98], 0
ADD      pop(), static[0x98]
MOVE     pop(), process[0xa4]
J       0x10($pc), -0x0, process[0xf4]
RND      static[0x98], 0
ADD      pop(), static[0x98]
SUB      pop(), 0
MOVE     pop(), process[0xa4]
RND      static[0x14], 0
ADD      pop(), static[0xe8]
MOVE     pop(), process[0xa8]
RND      static[0xa4], 0
NOTL     pop(), pop()
BEQZ    0x10($pc), -0x0
RND      static[0x98], 0
ADD      pop(), static[0x98]
MOVE     pop(), process[0xac]
J       0x10($pc), -0x0, process[0xf4]
RND      static[0x98], 0
ADD      pop(), static[0x98]
SUB      pop(), 0
MOVE     pop(), process[0xac]
MOVE     0x440, process[0xcc]
0x27     0x400, process[0x108]
RND      0x1000, 0
MOVE     pop(), process[0x10c]
ADD      0x100, process[0x10c]
MOD      0x1000, pop()
MOVE     pop(), process[0x10c]
ANIF    process[0x10c], 2, 3
SLT      0, process[0xa8]
BEQZ    0xfe8($pc), -0x0
MOVE     -0x5000, process[0xa8]
DIV      0x10, process[0xf8]
MOVE     pop(), process[0xf8]
J       0x20($pc), -0x0, process[0xf4]
SHA      static[0x94], process[0xa4]
MOVE     pop(), process[0xa4]
SHA      static[0x94], process[0xac]
MOVE     pop(), process[0xac]
ADD      0x100, process[0x10c]
MOD      0x1000, pop()
MOVE     pop(), process[0x10c]
ANIF    process[0x10c], 2, 3
SGT      static[0x88], process[0x98]
BNEZ    0xfd8($pc), -0x0
RTE      (process[0xf4])
}

//event-service routine for state 8
sub_0xb14()
{
CEQ      0x1300, -0x8($fp)
RSNF    subID(7), pop()
RTE      (process[0xf4])
}

//per-frame routine for state 8
sub_0xb20()
{
TST      0x20, process[0xc8]
NOTL     pop(), pop()
BEQZ    0x34($pc), -0x0
0x1B     process[0xf8], process[0xa8]
MOVE     pop(), process[0xa8]
ADD      static[0xec], process[0x90]
MOVE     pop(), process[0x90]
SUB      static[0x24], process[0x18c]
SLT      pop(), process[0x84]
BEQZ    0x18($pc), -0x0
SUB      static[0xc8], process[0x98]
MOVE     pop(), process[0x98]
SUB      static[0xc8], process[0x9c]
MOVE     pop(), process[0x9c]
SUB      static[0xc8], process[0xa0]
MOVE     pop(), process[0xa0]
RTE      (process[0xf4])
}

//state 9
sub_0xb64_9()
{
MSC     0x300, 5, 0x2, 12
MOVE     static[0xf0], process[0x138]
MOVE     0, process[0x8c]
MOVE     0, process[0x90]
RND      0x1000, 0
MOVE     pop(), process[0x94]
ADD      static[0x9c], process[0x84]
MOVE     pop(), process[0x84]
RND      static[0xf8], static[0xf4]
MOVE     pop(), process[0xa4]
RND      static[0xf8], static[0xf4]
MOVE     pop(), process[0xa8]
RND      static[0xf8], static[0xf4]
MOVE     pop(), process[0xac]
MOVE     0x40, process[0xcc]
MOVE     static[0xfc], process[0x98]
MOVE     static[0xfc], process[0x9c]
MOVE     static[0xfc], process[0xa0]
 JAL    0x0944, 0
RTE      (process[0xf4])
}

//per-frame routine state 9 
sub_0xbb4()
{
ADD      static[0x100], process[0x94]
MOVE     pop(), process[0x94]
SUB      process[0x100], process[0xfc]
SGE      static[0x5c], pop()
CEQ      static[0x34], self[0xd4]
ANDL     pop(), pop()
BEQZ    0x24($pc), -0x0
MULT     static[0x104], process[0xa4]
SHA      static[0xb8], pop()
MOVE     pop(), process[0xa4]
MULT     static[0x104], process[0xa8]
SHA      static[0xb8], pop()
MOVE     pop(), process[0xa8]
MULT     static[0x104], process[0xac]
SHA      static[0xb8], pop()
MOVE     pop(), process[0xac]
RTE      (process[0xf4])
}

sub_0xbf8()
{
BEQZ    0x24($pc), -0x0, process[0x7c]
PSHA     false, -0x4($fp)
CEQ      0x400, 0xc($fp)
BEQZ    0x8($pc), -0x0
MOVE     process[0x188], link7[0xf8]
J       0xc($pc), -0x0, process[0xf4]
CEQ      0x700, 0xc($fp)
BEQZ    0x4($pc), -0x0
MOVE     link7[0xf8], process[0x1a4]
J       0x0($pc), -0x1, process[0xf4]
RTE      (process[0xf4])
}

sub_0xc24()
{
JALR    subID(4), process[0xf4]
RTE      (process[0xf4])
}
