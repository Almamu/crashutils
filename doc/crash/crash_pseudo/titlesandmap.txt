sub_800326D8(polygonBuffer)
{
  //s5 = polygonBuffer

  struct = gp[0x2E4];
   
  mode = struct[0x3598];  //transition mode
                          //0 = start of game
                          //1 = blank screen
                          //2 = ?
                          //3 = full screen/finished fading in
                          //4 = unused?
                          //5 = started fading out
                          //6 = started fading in
                          //7 = finished fading out
  if (mode == 0)
  {
    struct[0x35A4] = 0;
    struct[0x35A0] = 0;
  }
  if (mode == 0 || mode == 1)       //are we at start of game or at blank screen?
  {

    *(0x6189C) = *(0x6189C) | 0xC;  //set fade in flag?
    *(0x61A34) =            0x120;  //fade in duration/counter
    struct[0x3598] = 6;             //also set mode to starting to fade in

    if (*(0x6189C) & 0x20000)
    {
      sub_80032BB4(struct, struct[0x14], struct[0x18]);
      sub_80032DFC(struct, struct[0x14], struct[0x18]);
    }

    *(0x61A34) = 0x120;             //reset duration counter if it was changed
  }
   
  if (mode == 2)
  {
    struct[0x3598] = 6;
    *(0x61A34) = 0x120;
  }

  //struct[0x359C] = flag set when not at map yet

  if (*(0x618B0) & 0x20000) || struct[0x359C])
  {
    count  =      0;
    offset =      0;
      
    do
    {
      countB = 0;  
      do
      {
        sprite = *(0x5840C)[0x78];

        *(0x5840C)[0x78] += 0x10;

        SetSprt16(sprite);

        valA = struct[0x18DC + offset + 0];

        v0 = ((valA << 15) >> 23) * 16;
        s0[8] = (v0 - struct[0x14]) - 256;  //lhu, sh
         
        v0 = ((valA << 7)  >> 24) * 16;
        s0[0xA] = (v0 - struct[0x18]) - 120; //lhu, sh
         
        v0 = (valA & 0xF) << 4;   //uses struct[offset + 0] but lbu instead of lw
        s0[0xC] = v0;              //store byte
   
        s0[0x4] = 0x80;            //sb
        s0[0x5] = 0x80;
        s0[0x6] = 0x80;

        v0 = (valA & 0xF0);       //already shifted left 4   
        s0[0xD] = v0;

        offset2 = (struct[0x18DC + offset + 4] & 0x1FF) * 2;
        s0[0xE] = struct[0x31A0 + offset2];            //sh

        AddPrim(polygonBuffer, s0);
        countB++;

        a0 = polygonBuffer;
        a1 = *(0x5840C)[0x78];  
        *(0x5840C)[0x78]+=0xC;

        offset3 = ((valA >> 25) & 3) * 12;   
        a1[0] = struct[0x3568+offset3+0];
        a1[4] = struct[0x3568+offset3+4];
        a1[8] = struct[0x3568+offset3+8];
    
        AddPrim(polygonBuffer, a1, a1[4], a1[8]);

        offset+=0xC;
      } while (count2 < 0x21)
    } while (count < 0x10)
  }

  mode = struct[0x3598];

  if (mode == 5)            //are we currently fading out?
  {
    if (*(0x61A34) == 0)    //has fade duration/counter reached 0?
    {
      struct[0x3598] = 7;   //then set mode to done fading out
      *(0x6189C) = *(0x6189C) & 0xFFFFFFF3;  //clear bits 2 & 3

      sub_80017448(0xFF);  //lots of const values?
    }
  }
  else if (mode == 6)      //are we currently fading in?
  {
    if (*(0x61A34) == 0)   //has fade duration/counter reached 0?
    {
      struct[0x3598] = 3;    //then set mode to visible screen
    }
  }
  else if (mode == 7)      //have we finished fading out?
  {
    sub_8001BA18(&sub_8001B92C, &sub_8001D1E0, 0);  

    if (struct[0x359C] != 0)
    {
      sub_80032FDC(struct[0x35D0], 0, -1);
    }

    struct[0x3598] = 1;
    struct[0x35D0] = struct[0x35D4];

    sub_80017448(0xFF);

    sub_80031EB4();                  //load next title

    return 0;
  }
 
  if (struct[0x35D4] != *(0x618D4))
  {

    old = *(0x618D4);

    if (*(0x56400) != 0 && *(0x618BC) != 0)
    {
      //var_28 = 0
      //var_50 = &var_28
      sub_80024040(0, *(0x618BC), 0xC00, 0);
     
      *(0x5640C) = -1;
      *(0x56400) =  0;
    }

    *(0x61A34) = 0xFFFFFF00;
    *(0x618D4) =        old;

    struct[0x35D4]    = old;
    struct[0x3598]    =   5;   //start fading out
  }

  return 0;
}


-----------------

sub_80031EB4()       //title sequence subroutine
{
  struct = gp[0x2E4] //v0

  *(0x619B4) = 0;    //note

  modeTitle = struct[0x35D0];  
  //b0b38 + 35d0 = b4108
  //0x35D4 seems to be a mirror of 0x35D0  


  //05: MAIN MENU
  //06: options menu
  //07: universal interactive studios
  //08: naughty dog
  //10: sony computer entertainment america presents
  //14: password menu/load game menu
  //15: map
  
  //--------set projection-----------//
  //case 7, 9, 10, 11 || > 15 = default
  switch(modeTitle)
  {
    case 1, 2, 3, 4:

      exit(0);     
      goto case 6;

    case 5, 8, 12, 13, 14:
      v0 = 0x37;
      break;

    case 6, 15:
      v0 = 0x25;
      break;
  
    case default:
      v0 = 0x5A;
      break;
  }

  0x5C53C[0x114] = v0;    //set projection value
  sub_80017790();         //reset matrices and reset projection
  //------------------------------


  //------------grab global entity entry-------------//
  switch(modeTitle)
  {
    case 5:            //Main Menu
      sub_80026200(1);
      var_28 = sub_80012660("0c_pz"); //v0  ZID's?
      s0 = 3;

    case 6:            //Options Menu
      var_28 = sub_80012660("0e_pz"); //v0
      s0 = 1;
   
    case 8:            //Naughty Dog
      var_28 = sub_80012660("0d_pz"); //v0
      s0 = 3;

    case 12:           //game over screen   
      var_28 = sub_80012660("0b_pz"); //v0
      s0 = 1;

    case 13, 14:       //Password/Load game menu
      var_28 = sub_80012660("0e_pz"); //v0
      s0 = 1;

    case 15:           //Map Menu   *(0x618DC) == game progress (0x63 = inital progress before start game)
      if (*(0x618DC) == 0x63 || *(0x618DC) < 0xA)               (0x1F = full completion, i.e. 31+1=32 levels)
      {
        if (*(0x618DC) == 9) { a0 = "1a_pz"; }           //at end of first island (native fortress)
        else                 { a0 = "1e_pz": }           //before end of first island
      }
      else
      {
        if      (0x0A <= *(0x618DC) < 0x12) { a0 = "2b_pz"; }   
        else if (0x12 <= *(0x618DC) < 0x32) { a0 = "3a_pz"; }           
      }
      
      var_28 = sub_80012660(a0);
      s0 = 1;
      
    case default:        //Sony Computer Entertainment America & Universal Interactive Screens
      var_28 = sub_80012660("0a_pz");   
      s0 = 0;
  
  }

  if (s0 == 0)           //if universal interactive or scea titles
  {
    sub_80031D50(&var_28, 0); 
  }

  *(0x6193C) = 0;
  *(0x61940) = 0;

  switch (modeTitle)
  {
    case 1, 2, 3, 4:
      *(0x618B8) = 0 nor modeTitle;

    case 5, 6, 8, 12, 13, 14, 15
      sub_80031D50(&var_28, s0);      //load title specific entitys

    case default:
      *(0x618B8) = 1;
      struct[0x359C] = 1;
  }

  *(0x6189C) = *(0x6189C) | 0x200000;

  char = sub_80012820(modeTitle);            //struct[0x3D50] is val of an ascii character
  sprintf(&var_48, "%cMapP", char & 0xFF);   //
  struct[0] = sub_80012660(&var_48);         //converts the string to an EID

  if (*(0x6189C) & 0x20000 != 0 && struct[0x359C] != 0)
  {
    entry = EID_PROCESS(struct[0]);
 
    count = 0;

    //s3 = entry
    item1 = entry[0x10];  //s2 = item1

   
    //in this sub the CLUT is loaded
    sub_80032FDC(struct[0x35D0], 1, 1);
    
    struct[0x4]  = item1[0]*16;
    struct[0x8]  = item1[4]*16;
    struct[0xC]  = item1[0];
    struct[0x10] = item1[4];
    struct[0x14] =        0;
    struct[0x18] =        0;

    
    if (item1[0xC] > 0)
    {
      do
      {
        item3N = entry[0x18 + (count*4)]; //count determines which of items after item 3
       
        if (*(0x61948) > item3N[0x18])
        {
          sub_8001BCC8(entry, count);
        }

        count++;
      } while (count < item1[0xC])
    }
  } 
     
  return 0;
} 

-----------------

sub_80031D50(menuEID, menuType)
{
  titleStruct = gp[0x2E4];

  subA = sub_8001B92C;
  subB = sub_8001D1E0;

  *(0x56400) =  0;
  *(0x5640C) = -1;
 
  sub_8001BA18(subA, subB, 0);

  if (menuType < 0)  { 31e60; }
  if (menuType == 0) { 31dcc; }
  if (menuType == 1) { 31df8; }
  if (menuType == 2 || menuType > 4) { 31e60; }
  if (menuType == 3) { 31e48; }

  31dcc:

  v1 |= 0x3FF0;

  *(0x6189C) = (*(0x6189C) & 0xFFFE) | 0x20000;

  titleStruct[0x359C] = 2;

  goto 31e60

  31df8:
  
  a0 = 0x58204;
  a1 = 8;

  *(0x6189C) = 0xFFFF;

  titleStruct[0x359C] = 0;
  
  goto 31e60
  
  do
  {
    a1++;
    if (a0[0] == 0x1E)
    {
      a0[0] = 1;
    }
   
    a0+=0x2C;
  } while (a1 < 0xF)

  goto 31e60;

  31e48:

  *(0x6189C) = 0x2FFFC;
  titleStruct[0x359C] = 1;

  goto 31e60;

  31e60:

  menuEntry = sub_80015118(menuEID, 1, 1); //resolve menuEID to listEntry
                                           //create chunkinfo for its entry and the containing chunk
                                           //return the entry
  
  item1 = menuEntry[0x10];
  itemN = menuEntry[0x10 + (item1[0x204] * 4)];

  sub_80025A60(menuEntry, itemN, 0, 2);
  sub_80015458(menuEntry, 1);
}

//--------------------------------------

//seems to initialize CLUT and TPAGE
sub_80032FDC(arg0, arg1, arg2)
{
  //s5 = arg2
  //a2 = "0MapP"
  //var_60 = arg1
  //actually copies 0MapP string to stack for sub call, the part that C hides
  
  char mapPal[5] = "0MapP";
  chr = sub_80012820(arg0);    //use ascii table to get char index
  mapPal[0] = chr;
  
  EID = sub_80012660(mapPal);  //convert to an EID
  
  var_68 = EID;
  var_60 = arg1;
  
  if (EID != 0x6396347F)
  {
    if (arg2 > 0)
      sub_80015118(&var_68, arg1, arg2);
    else
      sub_80015458(&var_68, -arg2);
  }
  
  entry = EID_PROCESS(&var_68); //var_58
  
  item1 = entry[0x10]; //fp
  
  //s6 = &item1[0x18];
  
  if (arg_2 > 0)
  {
    columnItem = 0;  //s3
  
    total = item1[8];  //s7
    
    clut = 0;  //s1
    
    if (total > 0)
    {
      //
      //var_50 = 0x88888889; scale factor for mult of 15 (120 in our case)
      var_48 = 0x6396347F;
      
      do
      {
        offset = (clut / 120) * 4;   //(countB / 120);  //*4???)
        
        EID = item1[0x78 + offset];  //0x78 = 120
        
        //grab the first item in this group of 120
        var_68 = EID;
        var_60 = arg_1;
        if (EID != 0x6396347F)
        {
          if (arg_2 > 0)
            sub_80015118(&var_68, arg_1, arg_2);          
          else
            sub_80015458(&var_68, -arg_2);
        }
        
        rightOffset = total - clut;
        
        if (rightOffset < 120)
          count = total;         //if this is the last group of 120, just use total val
        else 
          count = clut + 120;    //else the following loop ends after 120 cluts after the current
          
        if (clut < count)
        {
          //s6 = &item1[0x18]
          //s2 = &item1[0x1C]
          
          do
          {
            offset = (countB / 120) * 4;     //countB / 120;
            
            //a3 = entry
            EID = item1[120 + offset];
            entryB = EID_PROCESS(EID);
            
            //_countB = (clut/120) * 120;
            //modulus = clut - _clut;
            columnClut = clut % 120;
            
            clutItemN = entryB[0x10 + (columnClut*4)];  //current item is current index in group of 120
                                            
            numcolumnItems = item1[0x18 + ((column*0xC) + 8)];            
            
            if (columnItem >= numcolumnItems)
            {
              columnItem = 0;
              column++;
              
              //s6+=0xC
              //s2+=0xC
            }              
            
            xoffset = item1[0x18 + ((column * 0xC) + 0)];
            yoffset = item1[0x18 + ((column * 0xC) + 4)];
            
            clutID = LoadClut(clutItemN, xoffset, yoffset + columnItem);
        
            addr = gp[0x2E4] + (clut * 2)
            addr[0x31A0] = clutID;   //sh
            
            clut++;
            columnItem++;
          } while (clut < rightOffset);
        }
 
        //a2 = -arg2
        if (var_68 != 0x6396347F)        
        {
          //a0 = &var_68
          if (-arg2 > 0)
            sub_80015118(&var_68, var_60, -arg2);
          else
            sub_80015458(&var_68, arg2);
        }
        
      } while (clut < total)
    }
    
    sub_80014514(9);
    *(0x58230) = 0x1E;  //sh
    sub_80014514(0xA);
    *(0x5825C) = 0x1E;
    sub_80014514(0xD);
    *(0x582E0) = 0x1E;
    
    if ((item1[0x8] < 0xA1) ^ 1 == 1)
    {
      sub_80014514(8);
      *(0x58204) = 0x1E;
      //v0 = item1[0x8] < 0x121
    }
    else
    {
      if (*(0x58204) == 0x1E)
        *(0x58204) = 1;
    }
    
    if ((item1[0x8] < 0x121) ^ 1 == 1)
    {
      sub_80014514(0xC);
    }
    else
    {
      if (*(0x582B4) == 0x1E)
        *(0x582B4) = 0;
      else
        *(0x582B4) = 0x1E;
    }
    
    if ((item1[0x8] < 0x1A1) ^ 1 == 1)
    {
      sub_80014514(0xE);
    }
    else
    {
      if (*(0x5830C) == 0x1E)
        *(0x5830C) = 1;
    }
  }
  
  countB = 0;
    
  if (item1[0] > 0)
  {
    offset = countB * 4; 
    EID = item1[0x1B0 + offset];
      
    if (EID != 0x6396347F)
    {
      if (arg2 > 0)
        sub_80015118(&item1[0x1B0 + offset], arg1, arg2);
      else
        sub_80015458(&item1[0x1B0 + offset], -arg2);
    }
    
    countB++;
  } while (countB < item1[0])
  
  if (item1[0x14] > 0)
  {
    countB = 0;
    
    do
    {
      offset = countB * 4; 
      EID = item1[0x1E0 + offset];
    
      if (EID != 0x6396347F)
      {
        if (arg2 > 0)
          entry = sub_80015118(&item1[0x1E0 + offset], arg1, arg2);
        else
        {
          sub_80015458(&item1[0x1E0 + offset], -arg2);
          entry = 0;
        }
      }
      else
      {
        entry = 0;
      }
    
      if (item1[0x28] != 0 && arg2 > 0)  //column 2 dest X?
      {
        entryType = entry[8];
        
        if (entryType == 2)  //if entry is a TGEO
          sub_8001767C();
      }
    
      countB++;
    } while (countB < item1[0x14])
  }
}        
      
      